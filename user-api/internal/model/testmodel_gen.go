// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	testFieldNames          = builder.RawFieldNames(&Test{}, true)
	testRows                = strings.Join(testFieldNames, ",")
	testRowsExpectAutoSet   = strings.Join(stringx.Remove(testFieldNames), ",")
	testRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(testFieldNames, "id"))
)

type (
	testModel interface {
		Insert(ctx context.Context, data *Test) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Test, error)
		Update(ctx context.Context, data *Test) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTestModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Test struct {
		Id   int64          `db:"id"`
		Name sql.NullString `db:"name"`
		Time sql.NullTime   `db:"time"`
	}
)

func newTestModel(conn sqlx.SqlConn) *defaultTestModel {
	return &defaultTestModel{
		conn:  conn,
		table: `"public"."test"`,
	}
}

func (m *defaultTestModel) withSession(session sqlx.Session) *defaultTestModel {
	return &defaultTestModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: `"public"."test"`,
	}
}

func (m *defaultTestModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTestModel) FindOne(ctx context.Context, id int64) (*Test, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", testRows, m.table)
	var resp Test
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTestModel) Insert(ctx context.Context, data *Test) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3)", m.table, testRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.Time)
	return ret, err
}

func (m *defaultTestModel) Update(ctx context.Context, data *Test) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, testRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.Time)
	return err
}

func (m *defaultTestModel) tableName() string {
	return m.table
}
