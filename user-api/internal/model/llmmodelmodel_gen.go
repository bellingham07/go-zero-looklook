// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"github.com/SpectatorNan/gorm-zero/gormc"

	"gorm.io/gorm"
)

type (
	llmModelModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *LlmModel) error

		FindOne(ctx context.Context, id int64) (*LlmModel, error)
		Update(ctx context.Context, tx *gorm.DB, data *LlmModel) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultLlmModelModel struct {
		conn  *gorm.DB
		table string
	}

	LlmModel struct {
		Id                              int64           `gorm:"column:id"`
		PromptColumn                    sql.NullString  `gorm:"column:prompt_column"`
		ResponseColumn                  sql.NullString  `gorm:"column:response_column"`
		HistoryColumn                   sql.NullString  `gorm:"column:history_column"`
		LearningRate                    sql.NullFloat64 `gorm:"column:learning_rate"`
		NumTrainEpochs                  sql.NullInt64   `gorm:"column:num_train_epochs"`
		SaveSteps                       sql.NullInt64   `gorm:"column:save_steps"`
		PreSeqLen                       sql.NullInt64   `gorm:"column:pre_seq_len"`
		MaxSourceLength                 sql.NullInt64   `gorm:"column:max_source_length"`
		MaxTargetLength                 sql.NullInt64   `gorm:"column:max_target_length"`
		TrainBatchSize                  sql.NullInt64   `gorm:"column:train_batch_size"`
		Train_GradientAccumulationSteps sql.NullInt64   `gorm:"column:train_ gradient_accumulation_steps"`
		EvalBatchSize                   sql.NullInt64   `gorm:"column:eval_batch_size"`
		Eval_GradientAccumulationSteps  sql.NullInt64   `gorm:"column:eval_ gradient_accumulation_steps"`
		LoraRank                        sql.NullInt64   `gorm:"column:lora_rank"`
		LoraAlpha                       sql.NullInt64   `gorm:"column:lora_alpha"`
		LoraDropout                     sql.NullFloat64 `gorm:"column:lora_dropout"`
		QuantizationBit                 sql.NullString  `gorm:"column:quantization_bit"`
		Name                            sql.NullString  `gorm:"column:name"`
		Description                     sql.NullString  `gorm:"column:description"`
		DatasetTrainId                  sql.NullString  `gorm:"column:dataset_train_id"`
		DatasetTestId                   sql.NullString  `gorm:"column:dataset_test_id"`
		DatasetVerifyId                 sql.NullString  `gorm:"column:dataset_verify_id"`
		Algorithm                       sql.NullString  `gorm:"column:algorithm"`
		Hardware                        sql.NullString  `gorm:"column:hardware"`
		CreateAt                        sql.NullTime    `gorm:"column:create_at"`
		UpdateAt                        sql.NullTime    `gorm:"column:update_at"`
		DeleteAt                        sql.NullTime    `gorm:"column:delete_at"`
	}
)

func (LlmModel) TableName() string {
	return `"public"."llm_model"`
}

func newLlmModelModel(conn *gorm.DB) *defaultLlmModelModel {
	return &defaultLlmModelModel{
		conn:  conn,
		table: `"public"."llm_model"`,
	}
}

func (m *defaultLlmModelModel) Insert(ctx context.Context, tx *gorm.DB, data *LlmModel) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&data).Error
	return err
}

func (m *defaultLlmModelModel) FindOne(ctx context.Context, id int64) (*LlmModel, error) {
	var resp LlmModel
	err := m.conn.WithContext(ctx).Model(&LlmModel{}).Where("id = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLlmModelModel) Update(ctx context.Context, tx *gorm.DB, data *LlmModel) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(data).Error
	return err
}

func (m *defaultLlmModelModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&LlmModel{}, id).Error

	return err
}

func (m *defaultLlmModelModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.conn.WithContext(ctx).Transaction(fn)
}
