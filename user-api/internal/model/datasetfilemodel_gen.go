// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"github.com/SpectatorNan/gorm-zero/gormc"

	"gorm.io/gorm"
)

type (
	datasetFileModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *DatasetFile) error

		FindOne(ctx context.Context, id int64) (*DatasetFile, error)
		Update(ctx context.Context, tx *gorm.DB, data *DatasetFile) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultDatasetFileModel struct {
		conn  *gorm.DB
		table string
	}

	DatasetFile struct {
		Id         int64          `gorm:"column:id"`
		DatasetId  sql.NullInt64  `gorm:"column:dataset_id"` // 所属dataset_id
		Path       sql.NullString `gorm:"column:path"`       // 文件地址
		Filename   sql.NullString `gorm:"column:filename"`
		Size       sql.NullString `gorm:"column:size"`
		Status     sql.NullInt64  `gorm:"column:status"`      // 0开启1关闭2处理中
		Service    sql.NullString `gorm:"column:service"`     // 关联服务名称
		Project    sql.NullString `gorm:"column:project"`     // 关联服务所属项目名称
		UploadTime sql.NullTime   `gorm:"column:upload_time"` // 上传时间
	}
)

func (DatasetFile) TableName() string {
	return `"public"."dataset_file"`
}

func newDatasetFileModel(conn *gorm.DB) *defaultDatasetFileModel {
	return &defaultDatasetFileModel{
		conn:  conn,
		table: `"public"."dataset_file"`,
	}
}

func (m *defaultDatasetFileModel) Insert(ctx context.Context, tx *gorm.DB, data *DatasetFile) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&data).Error
	return err
}

func (m *defaultDatasetFileModel) FindOne(ctx context.Context, id int64) (*DatasetFile, error) {
	var resp DatasetFile
	err := m.conn.WithContext(ctx).Model(&DatasetFile{}).Where("id = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDatasetFileModel) Update(ctx context.Context, tx *gorm.DB, data *DatasetFile) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(data).Error
	return err
}

func (m *defaultDatasetFileModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&DatasetFile{}, id).Error

	return err
}

func (m *defaultDatasetFileModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.conn.WithContext(ctx).Transaction(fn)
}
