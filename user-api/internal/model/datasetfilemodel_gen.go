// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	datasetFileFieldNames          = builder.RawFieldNames(&DatasetFile{}, true)
	datasetFileRows                = strings.Join(datasetFileFieldNames, ",")
	datasetFileRowsExpectAutoSet   = strings.Join(stringx.Remove(datasetFileFieldNames), ",")
	datasetFileRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(datasetFileFieldNames, "id"))
)

type (
	datasetFileModel interface {
		Insert(ctx context.Context, data *DatasetFile) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*DatasetFile, error)
		Update(ctx context.Context, data *DatasetFile) error
		Delete(ctx context.Context, id int64) error
	}

	defaultDatasetFileModel struct {
		conn  sqlx.SqlConn
		table string
	}

	DatasetFile struct {
		Id         int64          `db:"id"`
		DatasetId  sql.NullInt64  `db:"dataset_id"` // 所属dataset_id
		Path       sql.NullString `db:"path"`       // 文件地址
		Filename   sql.NullString `db:"filename"`
		Size       sql.NullString `db:"size"`
		Status     sql.NullInt64  `db:"status"`      // 0开启1关闭2处理中
		Service    sql.NullString `db:"service"`     // 关联服务名称
		Project    sql.NullString `db:"project"`     // 关联服务所属项目名称
		UploadTime sql.NullTime   `db:"upload_time"` // 上传时间
	}
)

func newDatasetFileModel(conn sqlx.SqlConn) *defaultDatasetFileModel {
	return &defaultDatasetFileModel{
		conn:  conn,
		table: `"public"."dataset_file"`,
	}
}

func (m *defaultDatasetFileModel) withSession(session sqlx.Session) *defaultDatasetFileModel {
	return &defaultDatasetFileModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: `"public"."dataset_file"`,
	}
}

func (m *defaultDatasetFileModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultDatasetFileModel) FindOne(ctx context.Context, id int64) (*DatasetFile, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", datasetFileRows, m.table)
	var resp DatasetFile
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDatasetFileModel) Insert(ctx context.Context, data *DatasetFile) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9)", m.table, datasetFileRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.DatasetId, data.Path, data.Filename, data.Size, data.Status, data.Service, data.Project, data.UploadTime)
	return ret, err
}

func (m *defaultDatasetFileModel) Update(ctx context.Context, data *DatasetFile) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, datasetFileRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.DatasetId, data.Path, data.Filename, data.Size, data.Status, data.Service, data.Project, data.UploadTime)
	return err
}

func (m *defaultDatasetFileModel) tableName() string {
	return m.table
}
